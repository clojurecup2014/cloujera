define(["bundles/assess/assessmentTypes/SessionModel","underscore","js/lib/q","bundles/assess/framework/QuestionCollection","bundles/assess/framework/QuestionModel"],function(SessionModel,_,Q,QuestionCollection,QuestionModel){var QuickQuestionsSessionModel=SessionModel.extend({defaults:{state:"nothing",assessmentId:"",classId:null,sessionId:"",question:null},submit:function(){var self=this;if(!_(["question","submit-error"]).contains(self.get("state")))throw"Called submit in not allowed state";if(null===self.get("question"))return;var question=self.get("question");self.set("state","submitting");var response=question.toResponseJson();self.callSessionAction("submitResponse",response).then(function(data){data.effectiveResponse=response;var currentCount=self.get("numQuestions");self.set("numQuestions",currentCount-1),self.set("question",new QuestionModel(data)),self.set("state","feedback")},function(err){self.set("state","submit-error")}).done()},fetch:function(){var self=this;if("nothing"!==self.get("state"))throw"Called fetch in not allowed state";if(!this.has("classId")||!this.has("assessmentId"))throw"Can not get assessment without a classId and an assessmentId";self.set("state","loading"),Q.fcall(function(){return self.get("sessionId")||self.callGetOrCreateSession({})}).then(function(sessionId){self.set("sessionId",sessionId),self.fetchQuestion()},function(err){self.set("state","load-error")}).done()},fetchCount:function(){var self=this;Q.fcall(function(){if(self.get("sessionId"))return self.get("sessionId");else return self.callGetOrCreateSession({})}).then(function(sessionId){self.set("sessionId",sessionId),self.getRemainingCount()},function(err){self.set("state","load-error")}).done()},fetchQuestion:function(skip){var self=this;if(!(_(["feedback","loading"]).contains(self.get("state"))&&!skip||_(["question","submit-error"]).contains(self.get("state"))&&skip))throw"Called fetchQuestion in not allowed state!";if(self.set("state","loading"),skip)self.callSessionAction("skipQuestion",{}).then(function(data){var currentCount=self.get("numQuestions");self.set("numQuestions",currentCount-1),self.setCorrectState(data)},function(err){self.set("state","load-error")}).done();else self.callSessionAction("getCurrentQuestion",{}).then(function(data){self.setCorrectState(data)},function(err){self.set("state","load-error")}).done()},getRemainingCount:function(){var self=this;this.callSessionAction("getRemainingCount",{}).then(function(data){return self.set("numQuestions",data.remainingQuestions),data}).done()},setCorrectState:function(data){if(null===data)this.set("question",null),this.set("state","no-more-questions");else this.set("question",new QuestionModel(data)),this.get("question").on("submit",this.submit,this),this.set("state","question")}});return QuickQuestionsSessionModel});